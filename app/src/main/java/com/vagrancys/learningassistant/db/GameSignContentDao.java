package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.bean.game.GameSignContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_SIGN_CONTENT".
*/
public class GameSignContentDao extends AbstractDao<GameSignContent, Long> {

    public static final String TABLENAME = "GAME_SIGN_CONTENT";

    /**
     * Properties of entity GameSignContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(3, String.class, "summary", false, "SUMMARY");
        public final static Property Game_title = new Property(4, String.class, "game_title", false, "GAME_TITLE");
        public final static Property Level = new Property(5, int.class, "level", false, "LEVEL");
        public final static Property Game_subject_total = new Property(6, int.class, "game_subject_total", false, "GAME_SUBJECT_TOTAL");
        public final static Property Game_subject_current = new Property(7, int.class, "game_subject_current", false, "GAME_SUBJECT_CURRENT");
        public final static Property Game_score_total = new Property(8, int.class, "game_score_total", false, "GAME_SCORE_TOTAL");
        public final static Property Game_score_current = new Property(9, int.class, "game_score_current", false, "GAME_SCORE_CURRENT");
        public final static Property Game_error_total = new Property(10, int.class, "game_error_total", false, "GAME_ERROR_TOTAL");
        public final static Property Game_error_current = new Property(11, int.class, "game_error_current", false, "GAME_ERROR_CURRENT");
    }


    public GameSignContentDao(DaoConfig config) {
        super(config);
    }
    
    public GameSignContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_SIGN_CONTENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"TIME\" TEXT," + // 1: time
                "\"TITLE\" TEXT," + // 2: title
                "\"SUMMARY\" TEXT," + // 3: summary
                "\"GAME_TITLE\" TEXT," + // 4: game_title
                "\"LEVEL\" INTEGER NOT NULL ," + // 5: level
                "\"GAME_SUBJECT_TOTAL\" INTEGER NOT NULL ," + // 6: game_subject_total
                "\"GAME_SUBJECT_CURRENT\" INTEGER NOT NULL ," + // 7: game_subject_current
                "\"GAME_SCORE_TOTAL\" INTEGER NOT NULL ," + // 8: game_score_total
                "\"GAME_SCORE_CURRENT\" INTEGER NOT NULL ," + // 9: game_score_current
                "\"GAME_ERROR_TOTAL\" INTEGER NOT NULL ," + // 10: game_error_total
                "\"GAME_ERROR_CURRENT\" INTEGER NOT NULL );"); // 11: game_error_current
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_SIGN_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameSignContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(4, summary);
        }
 
        String game_title = entity.getGame_title();
        if (game_title != null) {
            stmt.bindString(5, game_title);
        }
        stmt.bindLong(6, entity.getLevel());
        stmt.bindLong(7, entity.getGame_subject_total());
        stmt.bindLong(8, entity.getGame_subject_current());
        stmt.bindLong(9, entity.getGame_score_total());
        stmt.bindLong(10, entity.getGame_score_current());
        stmt.bindLong(11, entity.getGame_error_total());
        stmt.bindLong(12, entity.getGame_error_current());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameSignContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(4, summary);
        }
 
        String game_title = entity.getGame_title();
        if (game_title != null) {
            stmt.bindString(5, game_title);
        }
        stmt.bindLong(6, entity.getLevel());
        stmt.bindLong(7, entity.getGame_subject_total());
        stmt.bindLong(8, entity.getGame_subject_current());
        stmt.bindLong(9, entity.getGame_score_total());
        stmt.bindLong(10, entity.getGame_score_current());
        stmt.bindLong(11, entity.getGame_error_total());
        stmt.bindLong(12, entity.getGame_error_current());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameSignContent readEntity(Cursor cursor, int offset) {
        GameSignContent entity = new GameSignContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // summary
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // game_title
            cursor.getInt(offset + 5), // level
            cursor.getInt(offset + 6), // game_subject_total
            cursor.getInt(offset + 7), // game_subject_current
            cursor.getInt(offset + 8), // game_score_total
            cursor.getInt(offset + 9), // game_score_current
            cursor.getInt(offset + 10), // game_error_total
            cursor.getInt(offset + 11) // game_error_current
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameSignContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSummary(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGame_title(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLevel(cursor.getInt(offset + 5));
        entity.setGame_subject_total(cursor.getInt(offset + 6));
        entity.setGame_subject_current(cursor.getInt(offset + 7));
        entity.setGame_score_total(cursor.getInt(offset + 8));
        entity.setGame_score_current(cursor.getInt(offset + 9));
        entity.setGame_error_total(cursor.getInt(offset + 10));
        entity.setGame_error_current(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameSignContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameSignContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameSignContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
