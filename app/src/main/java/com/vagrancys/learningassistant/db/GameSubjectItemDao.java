package com.vagrancys.learningassistant.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.vargancys.learningassistant.bean.game.GameFillItem;
import com.vargancys.learningassistant.bean.game.GameMultipleItem;
import com.vargancys.learningassistant.bean.game.GameRadioItem;
import com.vargancys.learningassistant.bean.game.GameSubjectiveItem;

import com.vargancys.learningassistant.bean.game.GameSubjectItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_SUBJECT_ITEM".
*/
public class GameSubjectItemDao extends AbstractDao<GameSubjectItem, Long> {

    public static final String TABLENAME = "GAME_SUBJECT_ITEM";

    /**
     * Properties of entity GameSubjectItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property People = new Property(1, int.class, "people", false, "PEOPLE");
        public final static Property Use = new Property(2, int.class, "use", false, "USE");
        public final static Property Count = new Property(3, int.class, "count", false, "COUNT");
        public final static Property MineId = new Property(4, long.class, "mineId", false, "MINE_ID");
        public final static Property Language = new Property(5, int.class, "language", false, "LANGUAGE");
        public final static Property SubjectId = new Property(6, long.class, "subjectId", false, "SUBJECT_ID");
        public final static Property RadioId = new Property(7, long.class, "radioId", false, "RADIO_ID");
        public final static Property MultipleId = new Property(8, long.class, "multipleId", false, "MULTIPLE_ID");
        public final static Property FillId = new Property(9, long.class, "fillId", false, "FILL_ID");
        public final static Property SubjectiveId = new Property(10, long.class, "subjectiveId", false, "SUBJECTIVE_ID");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
        public final static Property Select = new Property(12, int.class, "select", false, "SELECT");
        public final static Property Time = new Property(13, String.class, "time", false, "TIME");
        public final static Property Level = new Property(14, int.class, "level", false, "LEVEL");
        public final static Property IsError = new Property(15, boolean.class, "isError", false, "IS_ERROR");
        public final static Property IsRepeat = new Property(16, boolean.class, "isRepeat", false, "IS_REPEAT");
    }

    private DaoSession daoSession;

    private Query<GameSubjectItem> gameSubjectContent_MItemsQuery;

    public GameSubjectItemDao(DaoConfig config) {
        super(config);
    }
    
    public GameSubjectItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_SUBJECT_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"PEOPLE\" INTEGER NOT NULL ," + // 1: people
                "\"USE\" INTEGER NOT NULL ," + // 2: use
                "\"COUNT\" INTEGER NOT NULL ," + // 3: count
                "\"MINE_ID\" INTEGER NOT NULL ," + // 4: mineId
                "\"LANGUAGE\" INTEGER NOT NULL ," + // 5: language
                "\"SUBJECT_ID\" INTEGER NOT NULL ," + // 6: subjectId
                "\"RADIO_ID\" INTEGER NOT NULL ," + // 7: radioId
                "\"MULTIPLE_ID\" INTEGER NOT NULL ," + // 8: multipleId
                "\"FILL_ID\" INTEGER NOT NULL ," + // 9: fillId
                "\"SUBJECTIVE_ID\" INTEGER NOT NULL ," + // 10: subjectiveId
                "\"TITLE\" TEXT," + // 11: title
                "\"SELECT\" INTEGER NOT NULL ," + // 12: select
                "\"TIME\" TEXT," + // 13: time
                "\"LEVEL\" INTEGER NOT NULL ," + // 14: level
                "\"IS_ERROR\" INTEGER NOT NULL ," + // 15: isError
                "\"IS_REPEAT\" INTEGER NOT NULL );"); // 16: isRepeat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_SUBJECT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameSubjectItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPeople());
        stmt.bindLong(3, entity.getUse());
        stmt.bindLong(4, entity.getCount());
        stmt.bindLong(5, entity.getMineId());
        stmt.bindLong(6, entity.getLanguage());
        stmt.bindLong(7, entity.getSubjectId());
        stmt.bindLong(8, entity.getRadioId());
        stmt.bindLong(9, entity.getMultipleId());
        stmt.bindLong(10, entity.getFillId());
        stmt.bindLong(11, entity.getSubjectiveId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
        stmt.bindLong(13, entity.getSelect());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(14, time);
        }
        stmt.bindLong(15, entity.getLevel());
        stmt.bindLong(16, entity.getIsError() ? 1L: 0L);
        stmt.bindLong(17, entity.getIsRepeat() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameSubjectItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPeople());
        stmt.bindLong(3, entity.getUse());
        stmt.bindLong(4, entity.getCount());
        stmt.bindLong(5, entity.getMineId());
        stmt.bindLong(6, entity.getLanguage());
        stmt.bindLong(7, entity.getSubjectId());
        stmt.bindLong(8, entity.getRadioId());
        stmt.bindLong(9, entity.getMultipleId());
        stmt.bindLong(10, entity.getFillId());
        stmt.bindLong(11, entity.getSubjectiveId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
        stmt.bindLong(13, entity.getSelect());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(14, time);
        }
        stmt.bindLong(15, entity.getLevel());
        stmt.bindLong(16, entity.getIsError() ? 1L: 0L);
        stmt.bindLong(17, entity.getIsRepeat() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(GameSubjectItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameSubjectItem readEntity(Cursor cursor, int offset) {
        GameSubjectItem entity = new GameSubjectItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // people
            cursor.getInt(offset + 2), // use
            cursor.getInt(offset + 3), // count
            cursor.getLong(offset + 4), // mineId
            cursor.getInt(offset + 5), // language
            cursor.getLong(offset + 6), // subjectId
            cursor.getLong(offset + 7), // radioId
            cursor.getLong(offset + 8), // multipleId
            cursor.getLong(offset + 9), // fillId
            cursor.getLong(offset + 10), // subjectiveId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.getInt(offset + 12), // select
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // time
            cursor.getInt(offset + 14), // level
            cursor.getShort(offset + 15) != 0, // isError
            cursor.getShort(offset + 16) != 0 // isRepeat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameSubjectItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPeople(cursor.getInt(offset + 1));
        entity.setUse(cursor.getInt(offset + 2));
        entity.setCount(cursor.getInt(offset + 3));
        entity.setMineId(cursor.getLong(offset + 4));
        entity.setLanguage(cursor.getInt(offset + 5));
        entity.setSubjectId(cursor.getLong(offset + 6));
        entity.setRadioId(cursor.getLong(offset + 7));
        entity.setMultipleId(cursor.getLong(offset + 8));
        entity.setFillId(cursor.getLong(offset + 9));
        entity.setSubjectiveId(cursor.getLong(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSelect(cursor.getInt(offset + 12));
        entity.setTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLevel(cursor.getInt(offset + 14));
        entity.setIsError(cursor.getShort(offset + 15) != 0);
        entity.setIsRepeat(cursor.getShort(offset + 16) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameSubjectItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameSubjectItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameSubjectItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mItems" to-many relationship of GameSubjectContent. */
    public List<GameSubjectItem> _queryGameSubjectContent_MItems(long subjectId) {
        synchronized (this) {
            if (gameSubjectContent_MItemsQuery == null) {
                QueryBuilder<GameSubjectItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SubjectId.eq(null));
                gameSubjectContent_MItemsQuery = queryBuilder.build();
            }
        }
        Query<GameSubjectItem> query = gameSubjectContent_MItemsQuery.forCurrentThread();
        query.setParameter(0, subjectId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGameRadioItemDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGameMultipleItemDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getGameFillItemDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getGameSubjectiveItemDao().getAllColumns());
            builder.append(" FROM GAME_SUBJECT_ITEM T");
            builder.append(" LEFT JOIN GAME_RADIO_ITEM T0 ON T.\"RADIO_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN GAME_MULTIPLE_ITEM T1 ON T.\"MULTIPLE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN GAME_FILL_ITEM T2 ON T.\"FILL_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN GAME_SUBJECTIVE_ITEM T3 ON T.\"SUBJECTIVE_ID\"=T3.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GameSubjectItem loadCurrentDeep(Cursor cursor, boolean lock) {
        GameSubjectItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GameRadioItem radioItem = loadCurrentOther(daoSession.getGameRadioItemDao(), cursor, offset);
         if(radioItem != null) {
            entity.setRadioItem(radioItem);
        }
        offset += daoSession.getGameRadioItemDao().getAllColumns().length;

        GameMultipleItem multipleItem = loadCurrentOther(daoSession.getGameMultipleItemDao(), cursor, offset);
         if(multipleItem != null) {
            entity.setMultipleItem(multipleItem);
        }
        offset += daoSession.getGameMultipleItemDao().getAllColumns().length;

        GameFillItem fillItem = loadCurrentOther(daoSession.getGameFillItemDao(), cursor, offset);
         if(fillItem != null) {
            entity.setFillItem(fillItem);
        }
        offset += daoSession.getGameFillItemDao().getAllColumns().length;

        GameSubjectiveItem subjectiveItem = loadCurrentOther(daoSession.getGameSubjectiveItemDao(), cursor, offset);
         if(subjectiveItem != null) {
            entity.setSubjectiveItem(subjectiveItem);
        }

        return entity;    
    }

    public GameSubjectItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GameSubjectItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GameSubjectItem> list = new ArrayList<GameSubjectItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GameSubjectItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GameSubjectItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
