package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.db.knowledge.TemporaryArticleDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEMPORARY_ARTICLE_DB".
*/
public class TemporaryArticleDbDao extends AbstractDao<TemporaryArticleDb, Long> {

    public static final String TABLENAME = "TEMPORARY_ARTICLE_DB";

    /**
     * Properties of entity TemporaryArticleDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Temporary_article_id = new Property(0, Long.class, "temporary_article_id", true, "_id");
        public final static Property Article_id = new Property(1, int.class, "article_id", false, "ARTICLE_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
    }


    public TemporaryArticleDbDao(DaoConfig config) {
        super(config);
    }
    
    public TemporaryArticleDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEMPORARY_ARTICLE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: temporary_article_id
                "\"ARTICLE_ID\" INTEGER NOT NULL ," + // 1: article_id
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT);"); // 3: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEMPORARY_ARTICLE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TemporaryArticleDb entity) {
        stmt.clearBindings();
 
        Long temporary_article_id = entity.getTemporary_article_id();
        if (temporary_article_id != null) {
            stmt.bindLong(1, temporary_article_id);
        }
        stmt.bindLong(2, entity.getArticle_id());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TemporaryArticleDb entity) {
        stmt.clearBindings();
 
        Long temporary_article_id = entity.getTemporary_article_id();
        if (temporary_article_id != null) {
            stmt.bindLong(1, temporary_article_id);
        }
        stmt.bindLong(2, entity.getArticle_id());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TemporaryArticleDb readEntity(Cursor cursor, int offset) {
        TemporaryArticleDb entity = new TemporaryArticleDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // temporary_article_id
            cursor.getInt(offset + 1), // article_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TemporaryArticleDb entity, int offset) {
        entity.setTemporary_article_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticle_id(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TemporaryArticleDb entity, long rowId) {
        entity.setTemporary_article_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TemporaryArticleDb entity) {
        if(entity != null) {
            return entity.getTemporary_article_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TemporaryArticleDb entity) {
        return entity.getTemporary_article_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
