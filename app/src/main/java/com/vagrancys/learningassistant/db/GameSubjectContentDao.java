package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.bean.game.GameSubjectContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_SUBJECT_CONTENT".
*/
public class GameSubjectContentDao extends AbstractDao<GameSubjectContent, Long> {

    public static final String TABLENAME = "GAME_SUBJECT_CONTENT";

    /**
     * Properties of entity GameSubjectContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KnowId = new Property(1, long.class, "knowId", false, "KNOW_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Last_time = new Property(3, String.class, "last_time", false, "LAST_TIME");
        public final static Property Answer = new Property(4, int.class, "answer", false, "ANSWER");
        public final static Property Error = new Property(5, int.class, "error", false, "ERROR");
        public final static Property Problem = new Property(6, int.class, "problem", false, "PROBLEM");
    }

    private DaoSession daoSession;


    public GameSubjectContentDao(DaoConfig config) {
        super(config);
    }
    
    public GameSubjectContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_SUBJECT_CONTENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"KNOW_ID\" INTEGER NOT NULL ," + // 1: knowId
                "\"TITLE\" TEXT," + // 2: title
                "\"LAST_TIME\" TEXT," + // 3: last_time
                "\"ANSWER\" INTEGER NOT NULL ," + // 4: answer
                "\"ERROR\" INTEGER NOT NULL ," + // 5: error
                "\"PROBLEM\" INTEGER NOT NULL );"); // 6: problem
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_SUBJECT_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameSubjectContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKnowId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String last_time = entity.getLast_time();
        if (last_time != null) {
            stmt.bindString(4, last_time);
        }
        stmt.bindLong(5, entity.getAnswer());
        stmt.bindLong(6, entity.getError());
        stmt.bindLong(7, entity.getProblem());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameSubjectContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKnowId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String last_time = entity.getLast_time();
        if (last_time != null) {
            stmt.bindString(4, last_time);
        }
        stmt.bindLong(5, entity.getAnswer());
        stmt.bindLong(6, entity.getError());
        stmt.bindLong(7, entity.getProblem());
    }

    @Override
    protected final void attachEntity(GameSubjectContent entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameSubjectContent readEntity(Cursor cursor, int offset) {
        GameSubjectContent entity = new GameSubjectContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // knowId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // last_time
            cursor.getInt(offset + 4), // answer
            cursor.getInt(offset + 5), // error
            cursor.getInt(offset + 6) // problem
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameSubjectContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKnowId(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAnswer(cursor.getInt(offset + 4));
        entity.setError(cursor.getInt(offset + 5));
        entity.setProblem(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameSubjectContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameSubjectContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameSubjectContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
