package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.db.mine.LevelDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LEVEL_DATA_BEAN".
*/
public class LevelDataBeanDao extends AbstractDao<LevelDataBean, Long> {

    public static final String TABLENAME = "LEVEL_DATA_BEAN";

    /**
     * Properties of entity LevelDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MineId = new Property(1, int.class, "mineId", false, "MINE_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property News = new Property(4, String.class, "news", false, "NEWS");
        public final static Property Next = new Property(5, String.class, "next", false, "NEXT");
        public final static Property Experience = new Property(6, String.class, "experience", false, "EXPERIENCE");
        public final static Property Next_experience = new Property(7, String.class, "next_experience", false, "NEXT_EXPERIENCE");
        public final static Property Rank = new Property(8, String.class, "rank", false, "RANK");
    }


    public LevelDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LevelDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LEVEL_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"MINE_ID\" INTEGER NOT NULL ," + // 1: mineId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TITLE\" TEXT," + // 3: title
                "\"NEWS\" TEXT," + // 4: news
                "\"NEXT\" TEXT," + // 5: next
                "\"EXPERIENCE\" TEXT," + // 6: experience
                "\"NEXT_EXPERIENCE\" TEXT," + // 7: next_experience
                "\"RANK\" TEXT);"); // 8: rank
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LEVEL_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LevelDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMineId());
        stmt.bindLong(3, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String news = entity.getNews();
        if (news != null) {
            stmt.bindString(5, news);
        }
 
        String next = entity.getNext();
        if (next != null) {
            stmt.bindString(6, next);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(7, experience);
        }
 
        String next_experience = entity.getNext_experience();
        if (next_experience != null) {
            stmt.bindString(8, next_experience);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(9, rank);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LevelDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMineId());
        stmt.bindLong(3, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String news = entity.getNews();
        if (news != null) {
            stmt.bindString(5, news);
        }
 
        String next = entity.getNext();
        if (next != null) {
            stmt.bindString(6, next);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(7, experience);
        }
 
        String next_experience = entity.getNext_experience();
        if (next_experience != null) {
            stmt.bindString(8, next_experience);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(9, rank);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LevelDataBean readEntity(Cursor cursor, int offset) {
        LevelDataBean entity = new LevelDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mineId
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // news
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // next
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // experience
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // next_experience
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // rank
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LevelDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMineId(cursor.getInt(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNews(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNext(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExperience(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNext_experience(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRank(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LevelDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LevelDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LevelDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
