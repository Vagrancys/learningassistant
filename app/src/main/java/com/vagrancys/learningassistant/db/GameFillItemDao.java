package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.db.game.GameFillItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_FILL_ITEM".
*/
public class GameFillItemDao extends AbstractDao<GameFillItem, Long> {

    public static final String TABLENAME = "GAME_FILL_ITEM";

    /**
     * Properties of entity GameFillItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SubjectId = new Property(1, long.class, "subjectId", false, "SUBJECT_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Answer = new Property(3, int.class, "answer", false, "ANSWER");
        public final static Property First_answer = new Property(4, String.class, "first_answer", false, "FIRST_ANSWER");
        public final static Property Second_answer = new Property(5, String.class, "second_answer", false, "SECOND_ANSWER");
        public final static Property Third_answer = new Property(6, String.class, "third_answer", false, "THIRD_ANSWER");
        public final static Property Fourth_answer = new Property(7, String.class, "fourth_answer", false, "FOURTH_ANSWER");
    }


    public GameFillItemDao(DaoConfig config) {
        super(config);
    }
    
    public GameFillItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_FILL_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"SUBJECT_ID\" INTEGER NOT NULL ," + // 1: subjectId
                "\"TITLE\" TEXT," + // 2: title
                "\"ANSWER\" INTEGER NOT NULL ," + // 3: answer
                "\"FIRST_ANSWER\" TEXT," + // 4: first_answer
                "\"SECOND_ANSWER\" TEXT," + // 5: second_answer
                "\"THIRD_ANSWER\" TEXT," + // 6: third_answer
                "\"FOURTH_ANSWER\" TEXT);"); // 7: fourth_answer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_FILL_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameFillItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSubjectId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getAnswer());
 
        String first_answer = entity.getFirst_answer();
        if (first_answer != null) {
            stmt.bindString(5, first_answer);
        }
 
        String second_answer = entity.getSecond_answer();
        if (second_answer != null) {
            stmt.bindString(6, second_answer);
        }
 
        String third_answer = entity.getThird_answer();
        if (third_answer != null) {
            stmt.bindString(7, third_answer);
        }
 
        String fourth_answer = entity.getFourth_answer();
        if (fourth_answer != null) {
            stmt.bindString(8, fourth_answer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameFillItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSubjectId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getAnswer());
 
        String first_answer = entity.getFirst_answer();
        if (first_answer != null) {
            stmt.bindString(5, first_answer);
        }
 
        String second_answer = entity.getSecond_answer();
        if (second_answer != null) {
            stmt.bindString(6, second_answer);
        }
 
        String third_answer = entity.getThird_answer();
        if (third_answer != null) {
            stmt.bindString(7, third_answer);
        }
 
        String fourth_answer = entity.getFourth_answer();
        if (fourth_answer != null) {
            stmt.bindString(8, fourth_answer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameFillItem readEntity(Cursor cursor, int offset) {
        GameFillItem entity = new GameFillItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // subjectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // answer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // first_answer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // second_answer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // third_answer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // fourth_answer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameFillItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubjectId(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswer(cursor.getInt(offset + 3));
        entity.setFirst_answer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSecond_answer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setThird_answer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFourth_answer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameFillItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameFillItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameFillItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
