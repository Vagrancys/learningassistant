package com.vagrancys.learningassistant.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.vargancys.learningassistant.db.home.HomeKnowHistoryFunction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_KNOW_HISTORY_FUNCTION".
*/
public class HomeKnowHistoryFunctionDao extends AbstractDao<HomeKnowHistoryFunction, Long> {

    public static final String TABLENAME = "HOME_KNOW_HISTORY_FUNCTION";

    /**
     * Properties of entity HomeKnowHistoryFunction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FunctionId = new Property(1, long.class, "functionId", false, "FUNCTION_ID");
        public final static Property Common = new Property(2, int.class, "common", false, "COMMON");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(4, String.class, "summary", false, "SUMMARY");
        public final static Property Explain = new Property(5, String.class, "explain", false, "EXPLAIN");
    }

    private Query<HomeKnowHistoryFunction> homeKnowHistory_HomeKnowHistoryFunctionsQuery;

    public HomeKnowHistoryFunctionDao(DaoConfig config) {
        super(config);
    }
    
    public HomeKnowHistoryFunctionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_KNOW_HISTORY_FUNCTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"FUNCTION_ID\" INTEGER NOT NULL ," + // 1: functionId
                "\"COMMON\" INTEGER NOT NULL ," + // 2: common
                "\"TITLE\" TEXT," + // 3: title
                "\"SUMMARY\" TEXT," + // 4: summary
                "\"EXPLAIN\" TEXT);"); // 5: explain
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_KNOW_HISTORY_FUNCTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeKnowHistoryFunction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFunctionId());
        stmt.bindLong(3, entity.getCommon());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(5, summary);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(6, explain);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeKnowHistoryFunction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFunctionId());
        stmt.bindLong(3, entity.getCommon());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(5, summary);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(6, explain);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeKnowHistoryFunction readEntity(Cursor cursor, int offset) {
        HomeKnowHistoryFunction entity = new HomeKnowHistoryFunction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // functionId
            cursor.getInt(offset + 2), // common
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // summary
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // explain
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeKnowHistoryFunction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFunctionId(cursor.getLong(offset + 1));
        entity.setCommon(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSummary(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExplain(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeKnowHistoryFunction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeKnowHistoryFunction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeKnowHistoryFunction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "homeKnowHistoryFunctions" to-many relationship of HomeKnowHistory. */
    public List<HomeKnowHistoryFunction> _queryHomeKnowHistory_HomeKnowHistoryFunctions(long functionId) {
        synchronized (this) {
            if (homeKnowHistory_HomeKnowHistoryFunctionsQuery == null) {
                QueryBuilder<HomeKnowHistoryFunction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FunctionId.eq(null));
                homeKnowHistory_HomeKnowHistoryFunctionsQuery = queryBuilder.build();
            }
        }
        Query<HomeKnowHistoryFunction> query = homeKnowHistory_HomeKnowHistoryFunctionsQuery.forCurrentThread();
        query.setParameter(0, functionId);
        return query.list();
    }

}
