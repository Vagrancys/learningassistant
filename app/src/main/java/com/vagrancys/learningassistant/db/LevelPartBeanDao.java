package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.db.mine.LevelPartBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LEVEL_PART_BEAN".
*/
public class LevelPartBeanDao extends AbstractDao<LevelPartBean, Long> {

    public static final String TABLENAME = "LEVEL_PART_BEAN";

    /**
     * Properties of entity LevelPartBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MineId = new Property(1, long.class, "mineId", false, "MINE_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Level = new Property(4, String.class, "level", false, "LEVEL");
        public final static Property Experience = new Property(5, String.class, "experience", false, "EXPERIENCE");
        public final static Property Next_experience = new Property(6, String.class, "next_experience", false, "NEXT_EXPERIENCE");
        public final static Property Rank = new Property(7, String.class, "rank", false, "RANK");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
        public final static Property Privilege = new Property(9, String.class, "privilege", false, "PRIVILEGE");
    }


    public LevelPartBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LevelPartBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LEVEL_PART_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"MINE_ID\" INTEGER NOT NULL ," + // 1: mineId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TITLE\" TEXT," + // 3: title
                "\"LEVEL\" TEXT," + // 4: level
                "\"EXPERIENCE\" TEXT," + // 5: experience
                "\"NEXT_EXPERIENCE\" TEXT," + // 6: next_experience
                "\"RANK\" TEXT," + // 7: rank
                "\"TIME\" TEXT," + // 8: time
                "\"PRIVILEGE\" TEXT);"); // 9: privilege
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LEVEL_PART_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LevelPartBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMineId());
        stmt.bindLong(3, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(5, level);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(6, experience);
        }
 
        String next_experience = entity.getNext_experience();
        if (next_experience != null) {
            stmt.bindString(7, next_experience);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(8, rank);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String privilege = entity.getPrivilege();
        if (privilege != null) {
            stmt.bindString(10, privilege);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LevelPartBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMineId());
        stmt.bindLong(3, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(5, level);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(6, experience);
        }
 
        String next_experience = entity.getNext_experience();
        if (next_experience != null) {
            stmt.bindString(7, next_experience);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(8, rank);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String privilege = entity.getPrivilege();
        if (privilege != null) {
            stmt.bindString(10, privilege);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LevelPartBean readEntity(Cursor cursor, int offset) {
        LevelPartBean entity = new LevelPartBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // mineId
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // experience
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // next_experience
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rank
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // privilege
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LevelPartBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMineId(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLevel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExperience(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNext_experience(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRank(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrivilege(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LevelPartBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LevelPartBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LevelPartBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
