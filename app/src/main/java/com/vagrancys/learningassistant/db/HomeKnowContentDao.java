package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.bean.home.HomeKnowContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_KNOW_CONTENT".
*/
public class HomeKnowContentDao extends AbstractDao<HomeKnowContent, Long> {

    public static final String TABLENAME = "HOME_KNOW_CONTENT";

    /**
     * Properties of entity HomeKnowContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(2, String.class, "summary", false, "SUMMARY");
        public final static Property Show = new Property(3, String.class, "show", false, "SHOW");
        public final static Property Explain = new Property(4, String.class, "explain", false, "EXPLAIN");
        public final static Property Heed = new Property(5, String.class, "heed", false, "HEED");
        public final static Property Experience = new Property(6, String.class, "experience", false, "EXPERIENCE");
    }

    private DaoSession daoSession;


    public HomeKnowContentDao(DaoConfig config) {
        super(config);
    }
    
    public HomeKnowContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_KNOW_CONTENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"SUMMARY\" TEXT," + // 2: summary
                "\"SHOW\" TEXT," + // 3: show
                "\"EXPLAIN\" TEXT," + // 4: explain
                "\"HEED\" TEXT," + // 5: heed
                "\"EXPERIENCE\" TEXT);"); // 6: experience
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_KNOW_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeKnowContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String show = entity.getShow();
        if (show != null) {
            stmt.bindString(4, show);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(5, explain);
        }
 
        String heed = entity.getHeed();
        if (heed != null) {
            stmt.bindString(6, heed);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(7, experience);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeKnowContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String show = entity.getShow();
        if (show != null) {
            stmt.bindString(4, show);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(5, explain);
        }
 
        String heed = entity.getHeed();
        if (heed != null) {
            stmt.bindString(6, heed);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(7, experience);
        }
    }

    @Override
    protected final void attachEntity(HomeKnowContent entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeKnowContent readEntity(Cursor cursor, int offset) {
        HomeKnowContent entity = new HomeKnowContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // summary
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // show
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // explain
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // heed
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // experience
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeKnowContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSummary(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShow(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExplain(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeed(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExperience(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeKnowContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeKnowContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeKnowContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
