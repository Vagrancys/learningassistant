package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.db.knowledge.TemporaryAidedDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEMPORARY_AIDED_DB".
*/
public class TemporaryAidedDbDao extends AbstractDao<TemporaryAidedDb, Long> {

    public static final String TABLENAME = "TEMPORARY_AIDED_DB";

    /**
     * Properties of entity TemporaryAidedDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Db_id = new Property(0, long.class, "db_id", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Count = new Property(3, int.class, "count", false, "COUNT");
        public final static Property Summary = new Property(4, String.class, "summary", false, "SUMMARY");
        public final static Property Explain = new Property(5, String.class, "explain", false, "EXPLAIN");
        public final static Property Level = new Property(6, int.class, "level", false, "LEVEL");
        public final static Property Father_id = new Property(7, int.class, "father_id", false, "FATHER_ID");
        public final static Property Directory = new Property(8, String.class, "directory", false, "DIRECTORY");
        public final static Property Now_explain = new Property(9, String.class, "now_explain", false, "NOW_EXPLAIN");
        public final static Property Deep_explain = new Property(10, String.class, "deep_explain", false, "DEEP_EXPLAIN");
        public final static Property Advance = new Property(11, String.class, "advance", false, "ADVANCE");
        public final static Property Experience = new Property(12, String.class, "experience", false, "EXPERIENCE");
        public final static Property Publicize = new Property(13, String.class, "publicize", false, "PUBLICIZE");
        public final static Property Case = new Property(14, String.class, "Case", false, "CASE");
    }


    public TemporaryAidedDbDao(DaoConfig config) {
        super(config);
    }
    
    public TemporaryAidedDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEMPORARY_AIDED_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: db_id
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"TITLE\" TEXT," + // 2: title
                "\"COUNT\" INTEGER NOT NULL ," + // 3: count
                "\"SUMMARY\" TEXT," + // 4: summary
                "\"EXPLAIN\" TEXT," + // 5: explain
                "\"LEVEL\" INTEGER NOT NULL ," + // 6: level
                "\"FATHER_ID\" INTEGER NOT NULL ," + // 7: father_id
                "\"DIRECTORY\" TEXT," + // 8: directory
                "\"NOW_EXPLAIN\" TEXT," + // 9: now_explain
                "\"DEEP_EXPLAIN\" TEXT," + // 10: deep_explain
                "\"ADVANCE\" TEXT," + // 11: advance
                "\"EXPERIENCE\" TEXT," + // 12: experience
                "\"PUBLICIZE\" TEXT," + // 13: publicize
                "\"CASE\" TEXT);"); // 14: Case
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEMPORARY_AIDED_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TemporaryAidedDb entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDb_id());
        stmt.bindLong(2, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getCount());
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(5, summary);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(6, explain);
        }
        stmt.bindLong(7, entity.getLevel());
        stmt.bindLong(8, entity.getFather_id());
 
        String directory = entity.getDirectory();
        if (directory != null) {
            stmt.bindString(9, directory);
        }
 
        String now_explain = entity.getNow_explain();
        if (now_explain != null) {
            stmt.bindString(10, now_explain);
        }
 
        String deep_explain = entity.getDeep_explain();
        if (deep_explain != null) {
            stmt.bindString(11, deep_explain);
        }
 
        String advance = entity.getAdvance();
        if (advance != null) {
            stmt.bindString(12, advance);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(13, experience);
        }
 
        String publicize = entity.getPublicize();
        if (publicize != null) {
            stmt.bindString(14, publicize);
        }
 
        String Case = entity.getCase();
        if (Case != null) {
            stmt.bindString(15, Case);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TemporaryAidedDb entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDb_id());
        stmt.bindLong(2, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getCount());
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(5, summary);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(6, explain);
        }
        stmt.bindLong(7, entity.getLevel());
        stmt.bindLong(8, entity.getFather_id());
 
        String directory = entity.getDirectory();
        if (directory != null) {
            stmt.bindString(9, directory);
        }
 
        String now_explain = entity.getNow_explain();
        if (now_explain != null) {
            stmt.bindString(10, now_explain);
        }
 
        String deep_explain = entity.getDeep_explain();
        if (deep_explain != null) {
            stmt.bindString(11, deep_explain);
        }
 
        String advance = entity.getAdvance();
        if (advance != null) {
            stmt.bindString(12, advance);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(13, experience);
        }
 
        String publicize = entity.getPublicize();
        if (publicize != null) {
            stmt.bindString(14, publicize);
        }
 
        String Case = entity.getCase();
        if (Case != null) {
            stmt.bindString(15, Case);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TemporaryAidedDb readEntity(Cursor cursor, int offset) {
        TemporaryAidedDb entity = new TemporaryAidedDb( //
            cursor.getLong(offset + 0), // db_id
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // summary
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // explain
            cursor.getInt(offset + 6), // level
            cursor.getInt(offset + 7), // father_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // directory
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // now_explain
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // deep_explain
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // advance
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // experience
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // publicize
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // Case
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TemporaryAidedDb entity, int offset) {
        entity.setDb_id(cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCount(cursor.getInt(offset + 3));
        entity.setSummary(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExplain(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLevel(cursor.getInt(offset + 6));
        entity.setFather_id(cursor.getInt(offset + 7));
        entity.setDirectory(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNow_explain(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeep_explain(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAdvance(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setExperience(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPublicize(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCase(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TemporaryAidedDb entity, long rowId) {
        entity.setDb_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TemporaryAidedDb entity) {
        if(entity != null) {
            return entity.getDb_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TemporaryAidedDb entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
