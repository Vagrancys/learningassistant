package com.vagrancys.learningassistant.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.vargancys.learningassistant.db.ladder.LadderCommentReplyBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LADDER_COMMENT_REPLY_BEAN".
*/
public class LadderCommentReplyBeanDao extends AbstractDao<LadderCommentReplyBean, Long> {

    public static final String TABLENAME = "LADDER_COMMENT_REPLY_BEAN";

    /**
     * Properties of entity LadderCommentReplyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CommentId = new Property(1, long.class, "commentId", false, "COMMENT_ID");
        public final static Property Author = new Property(2, long.class, "author", false, "AUTHOR");
        public final static Property Author_title = new Property(3, String.class, "author_title", false, "AUTHOR_TITLE");
        public final static Property Level = new Property(4, String.class, "level", false, "LEVEL");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Comment = new Property(7, String.class, "comment", false, "COMMENT");
    }

    private Query<LadderCommentReplyBean> ladderCommentBean_MBeanQuery;

    public LadderCommentReplyBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LadderCommentReplyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LADDER_COMMENT_REPLY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"COMMENT_ID\" INTEGER NOT NULL ," + // 1: commentId
                "\"AUTHOR\" INTEGER NOT NULL ," + // 2: author
                "\"AUTHOR_TITLE\" TEXT," + // 3: author_title
                "\"LEVEL\" TEXT," + // 4: level
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"TIME\" TEXT," + // 6: time
                "\"COMMENT\" TEXT);"); // 7: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LADDER_COMMENT_REPLY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LadderCommentReplyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCommentId());
        stmt.bindLong(3, entity.getAuthor());
 
        String author_title = entity.getAuthor_title();
        if (author_title != null) {
            stmt.bindString(4, author_title);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(5, level);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(8, comment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LadderCommentReplyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCommentId());
        stmt.bindLong(3, entity.getAuthor());
 
        String author_title = entity.getAuthor_title();
        if (author_title != null) {
            stmt.bindString(4, author_title);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(5, level);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(8, comment);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LadderCommentReplyBean readEntity(Cursor cursor, int offset) {
        LadderCommentReplyBean entity = new LadderCommentReplyBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // commentId
            cursor.getLong(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author_title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // comment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LadderCommentReplyBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommentId(cursor.getLong(offset + 1));
        entity.setAuthor(cursor.getLong(offset + 2));
        entity.setAuthor_title(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLevel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComment(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LadderCommentReplyBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LadderCommentReplyBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LadderCommentReplyBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mBean" to-many relationship of LadderCommentBean. */
    public List<LadderCommentReplyBean> _queryLadderCommentBean_MBean(long commentId) {
        synchronized (this) {
            if (ladderCommentBean_MBeanQuery == null) {
                QueryBuilder<LadderCommentReplyBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CommentId.eq(null));
                ladderCommentBean_MBeanQuery = queryBuilder.build();
            }
        }
        Query<LadderCommentReplyBean> query = ladderCommentBean_MBeanQuery.forCurrentThread();
        query.setParameter(0, commentId);
        return query.list();
    }

}
