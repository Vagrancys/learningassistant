package com.vagrancys.learningassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vargancys.learningassistant.db.mine.MineDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MINE_DATA_BEAN".
*/
public class MineDataBeanDao extends AbstractDao<MineDataBean, Long> {

    public static final String TABLENAME = "MINE_DATA_BEAN";

    /**
     * Properties of entity MineDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Level = new Property(2, int.class, "level", false, "LEVEL");
        public final static Property Level_total = new Property(3, int.class, "level_total", false, "LEVEL_TOTAL");
        public final static Property Level_current = new Property(4, int.class, "level_current", false, "LEVEL_CURRENT");
        public final static Property Real_level = new Property(5, int.class, "real_level", false, "REAL_LEVEL");
        public final static Property Knowledge = new Property(6, int.class, "knowledge", false, "KNOWLEDGE");
        public final static Property Influence = new Property(7, int.class, "influence", false, "INFLUENCE");
        public final static Property Money = new Property(8, int.class, "money", false, "MONEY");
    }


    public MineDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MineDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MINE_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LEVEL\" INTEGER NOT NULL ," + // 2: level
                "\"LEVEL_TOTAL\" INTEGER NOT NULL ," + // 3: level_total
                "\"LEVEL_CURRENT\" INTEGER NOT NULL ," + // 4: level_current
                "\"REAL_LEVEL\" INTEGER NOT NULL ," + // 5: real_level
                "\"KNOWLEDGE\" INTEGER NOT NULL ," + // 6: knowledge
                "\"INFLUENCE\" INTEGER NOT NULL ," + // 7: influence
                "\"MONEY\" INTEGER NOT NULL );"); // 8: money
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MINE_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MineDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getLevel());
        stmt.bindLong(4, entity.getLevel_total());
        stmt.bindLong(5, entity.getLevel_current());
        stmt.bindLong(6, entity.getReal_level());
        stmt.bindLong(7, entity.getKnowledge());
        stmt.bindLong(8, entity.getInfluence());
        stmt.bindLong(9, entity.getMoney());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MineDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getLevel());
        stmt.bindLong(4, entity.getLevel_total());
        stmt.bindLong(5, entity.getLevel_current());
        stmt.bindLong(6, entity.getReal_level());
        stmt.bindLong(7, entity.getKnowledge());
        stmt.bindLong(8, entity.getInfluence());
        stmt.bindLong(9, entity.getMoney());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MineDataBean readEntity(Cursor cursor, int offset) {
        MineDataBean entity = new MineDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // level
            cursor.getInt(offset + 3), // level_total
            cursor.getInt(offset + 4), // level_current
            cursor.getInt(offset + 5), // real_level
            cursor.getInt(offset + 6), // knowledge
            cursor.getInt(offset + 7), // influence
            cursor.getInt(offset + 8) // money
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MineDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLevel(cursor.getInt(offset + 2));
        entity.setLevel_total(cursor.getInt(offset + 3));
        entity.setLevel_current(cursor.getInt(offset + 4));
        entity.setReal_level(cursor.getInt(offset + 5));
        entity.setKnowledge(cursor.getInt(offset + 6));
        entity.setInfluence(cursor.getInt(offset + 7));
        entity.setMoney(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MineDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MineDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MineDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
